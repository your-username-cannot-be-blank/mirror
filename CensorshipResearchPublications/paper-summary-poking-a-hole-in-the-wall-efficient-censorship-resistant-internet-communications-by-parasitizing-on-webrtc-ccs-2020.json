[
    {
        "id": 2251,
        "name": "",
        "username": "tango",
        "avatar_template": "/letter_avatar_proxy/v4/letter/t/e36b37/{size}.png",
        "created_at": "2020-12-04T01:48:40.673Z",
        "cooked": "<p>Poking a Hole in the Wall: Efficient Censorship-Resistant Internet Communications by Parasitizing on WebRTC<br>\nDiogo Barradas, Nuno Santos, Luís Rodrigues, Vítor Nunes<br>\n<a href=\"https://censorbib.nymity.ch/#Barradas2020a\" rel=\"noopener nofollow ugc\">https://censorbib.nymity.ch/#Barradas2020a</a><br>\n<a href=\"https://github.com/dmbb/Protozoa\" rel=\"noopener nofollow ugc\">https://github.com/dmbb/Protozoa</a></p>\n<p>This paper presents a censorship circumvention design called Protozoa. Protozoa belongs to the class of systems that are use what the authors call “multimedia covert streaming”: disguising a channel to look like the transmission of an audio or video stream. Past such systems have either mimicked the surface-level features of an encrypted media stream (e.g. <a href=\"https://censorbib.nymity.ch/#Moghaddam2012a\" rel=\"noopener nofollow ugc\">SkypeMorph</a>), which gives rise to <a href=\"https://censorbib.nymity.ch/#Houmansadr2013b\" rel=\"noopener nofollow ugc\">dead-parrot attacks</a>; or they have encoded data into the audio/video signal in a way that survives media compression (e.g. <a href=\"https://censorbib.nymity.ch/#McPherson2016a\" rel=\"noopener nofollow ugc\">CovertCast</a>), which comes with a loss of efficiency and the challenge of matching packet size and timing features. The main innovation of Protozoa is that while it tunnels through a genuine video streaming application, it <em>doesn’t actually exchange properly encoded video streams</em>. Instead, it takes an input video stream (such as the webcam video) as a carrier, scoops out its encoded video bitstream, and replaces it with covert data. The recipient extracts the covert data and throws away the video stream container. This is all done without modifying the sizes or timing of video stream packets, so the traffic characteristics of Protozoa are identical to hose of the carrier video. Overall encryption of the media stream prevents an observer from seeing that any traffic replacement has happened. The design, which the authors call “encoded media tunneling,” allows for both higher performance and better resistance to traffic analysis. Encoded media tunneling in some ways resembles <a href=\"https://censorbib.nymity.ch/#Bocovich2016a\" rel=\"noopener nofollow ugc\">Slitheen</a>, which also uses an independent carrier traffic generator and opportunistically replaces part of the traffic with covert data.</p>\n<p>The authors build a prototype of the system using a version of Chromium that is modified to permit hooking the video transport layer and replacing the video bitstream. They do most of their testing with <a href=\"https://whereby.com/\" rel=\"noopener nofollow ugc\">Whereby</a>, a WebRTC video conferencing service. The client and proxy first share a meeting room identifier out of band. Both parties then enter the meeting room in the modified Chromium and start a meeting. Protozoa takes over the video stream and starts replacing content. Using an established service like Whereby has the advantage that most concerns about <a href=\"https://gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/snowflake/-/wikis/Fingerprinting\" rel=\"noopener nofollow ugc\">WebRTC fingerprinting</a> do not apply: the WebRTC stack comes from a browser, and the browser automatically uses the service’s own signaling servers and STUN/TURN servers. The authors build a data set of synthetic traffic and evaluate detectability using a <a href=\"https://censorbib.nymity.ch/#Barradas2018a\" rel=\"noopener nofollow ugc\">machine learning classifier</a>. Protozoa-tunnelled traffic is barely more detectable than random chance, which is expected, given how it works.</p>\n<p>What makes Whereby a suitable media streaming service is that it establishes a direct peer-to-peer WebRTC connection between the two meeting participants, and both peers know to extract data from the video stream and not treat it like actual video. Protozoa would not work with services that intercept the media stream at a middlebox and attempt to decode it, as <a href=\"https://medium.com/tenable-techblog/lets-reverse-engineer-discord-1976773f4626#841f\" rel=\"noopener nofollow ugc\">Discord is reported to do</a>. Reliability and retransmission of data within the (potentially unreliable) media tunnel is handled by the OS kernels at both ends, as with a VPN. The system doesn’t have any inherent defense against insider attack or proxy enumeration; as with other covert tunnels, you need to take care that the IP addresses of Protozoa proxies do not become known to censors.</p>\n<p>Thanks to the authors for commenting on a draft of this summary.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 1,
        "updated_at": "2020-12-04T01:48:40.673Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 31,
        "reads": 4,
        "readers_count": 3,
        "score": 155.8,
        "yours": false,
        "topic_id": 795,
        "topic_slug": "paper-summary-poking-a-hole-in-the-wall-efficient-censorship-resistant-internet-communications-by-parasitizing-on-webrtc-ccs-2020",
        "display_username": "",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
            {
                "url": "https://censorbib.nymity.ch/#Barradas2020a",
                "internal": false,
                "reflection": false,
                "title": "The Internet censorship bibliography",
                "clicks": 3
            },
            {
                "url": "https://censorbib.nymity.ch/#Moghaddam2012a",
                "internal": false,
                "reflection": false,
                "title": "The Internet censorship bibliography",
                "clicks": 0
            },
            {
                "url": "https://censorbib.nymity.ch/#Bocovich2016a",
                "internal": false,
                "reflection": false,
                "title": "The Internet censorship bibliography",
                "clicks": 0
            },
            {
                "url": "https://censorbib.nymity.ch/#McPherson2016a",
                "internal": false,
                "reflection": false,
                "title": "The Internet censorship bibliography",
                "clicks": 0
            },
            {
                "url": "https://github.com/dmbb/Protozoa",
                "internal": false,
                "reflection": false,
                "title": "GitHub - dmbb/Protozoa: Code for the paper \"Poking a Hole in the Wall: Efficient Censorship-Resistant Internet Communications by Parasitizing on WebRTC\" [ACM SIGSAC CCS '20]",
                "clicks": 0
            },
            {
                "url": "https://censorbib.nymity.ch/#Houmansadr2013b",
                "internal": false,
                "reflection": false,
                "title": "The Internet censorship bibliography",
                "clicks": 0
            },
            {
                "url": "https://gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/snowflake/-/wikis/Fingerprinting",
                "internal": false,
                "reflection": false,
                "title": "Fingerprinting · Wiki · The Tor Project / Anti-censorship / Pluggable Transports / Snowflake · GitLab",
                "clicks": 0
            },
            {
                "url": "https://censorbib.nymity.ch/#Barradas2018a",
                "internal": false,
                "reflection": false,
                "title": "The Internet censorship bibliography",
                "clicks": 0
            },
            {
                "url": "https://medium.com/tenable-techblog/lets-reverse-engineer-discord-1976773f4626#841f",
                "internal": false,
                "reflection": false,
                "title": "Let’s Reverse Engineer Discord. How we reverse engineered Discord’s… | by David Wells | Tenable TechBlog | Medium",
                "clicks": 0
            },
            {
                "url": "https://whereby.com/",
                "internal": false,
                "reflection": false,
                "clicks": 0
            }
        ],
        "read": true,
        "user_title": "dnstt developer",
        "title_is_group": false,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 26,
        "hidden": false,
        "trust_level": 3,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": false,
        "wiki": false,
        "post_url": "/t/paper-summary-poking-a-hole-in-the-wall-efficient-censorship-resistant-internet-communications-by-parasitizing-on-webrtc-ccs-2020/795/1",
        "can_translate": false
    }
]