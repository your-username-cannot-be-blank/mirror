[
    {
        "id": 1516,
        "name": "gfw.report",
        "username": "gfw.report",
        "avatar_template": "/letter_avatar_proxy/v4/letter/g/53a042/{size}.png",
        "created_at": "2020-06-16T18:25:03.627Z",
        "cooked": "<p>Authors: Anonymous</p>\n<p>Date: Tuesday, June 16, 2020</p>\n<p>中文版: <a href=\"https://gfw.report/blog/v2ray_weaknesses/zh/\" rel=\"nofollow noopener\"><em>总结近期发现的V2Ray弱点</em></a></p>\n<p>This summary first appeared on <a href=\"https://gfw.report/blog/v2ray_weaknesses/en/\" rel=\"nofollow noopener\">GFW Report</a>. We also maintain an up-to-date copy of the report on both net4people and ntc.party.</p>\n<hr>\n<p>Several weaknesses were discovered in the V2Ray recently, which could be used to identify V2Ray clients or servers that run VMess, TLS or HTTP protocol. Below is our summary and understanding on these weaknesses.</p>\n<p>In general, these weaknesses fall into three categories:</p>\n<ul>\n<li>Inappropriate authentications in VMess, making the servers vulnerable to replay attacks.</li>\n<li>Hardcoded unique ciphersuites, leading to the rarely-seen fingerprints of the TLS ClientHello messages.</li>\n<li>Failed attempt to parrot/mimic the HTTP server.</li>\n</ul>\n<h2>Replay Attacks against the VMess Protocol</h2>\n<p>As introduced in the <a href=\"https://www.v2ray.com/developer/protocols/vmess.html\" rel=\"nofollow noopener\">specification</a> (<a href=\"https://github.com/v2ray/manual/blob/master/eng_en/protocols/vmess.md\" rel=\"nofollow noopener\">English version</a>) of the VMess protocol, a VMess request looks like this:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>16 bytes</th>\n<th>\n<em>X</em> bytes</th>\n<th>Other Parts</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Authentication Credential</td>\n<td>Command</td>\n<td>Data</td>\n</tr>\n</tbody>\n</table>\n</div><ul>\n<li>The 16-byte <code>Authentication Credential</code> is a HMAC associated with the <code>user ID</code> and a <code>UTC timestamp</code>.</li>\n<li>The <code>Command</code> is encrypted using <code>AES-128-CFB(iv, key)</code>, where the <a href=\"https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L137\" rel=\"nofollow noopener\"><code>iv</code> is the md5 hash value of the <code>UTC timestamp</code></a>, and <code>key</code> is the preshared one associated with <code>user ID</code>.</li>\n</ul>\n<p>The following table shows the structure of <code>Command</code> after decryption:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>1 byte</th>\n<th>16 bytes</th>\n<th>16 bytes</th>\n<th>1 byte</th>\n<th>1 byte</th>\n<th>4 bits</th>\n<th>4 bits</th>\n<th>1 byte</th>\n<th>1 byte</th>\n<th>2 byte</th>\n<th>1 bytes</th>\n<th>N byte</th>\n<th>P bytes</th>\n<th>4 bytes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Version</td>\n<td>Encryption IV</td>\n<td>Encryption Key</td>\n<td>Response Auth V</td>\n<td>Options</td>\n<td>Margin P</td>\n<td>Encrypt Method</td>\n<td>Reserved</td>\n<td>CMD</td>\n<td>Port</td>\n<td>Address Type</td>\n<td>Address</td>\n<td>Random Value</td>\n<td>Checksum F</td>\n</tr>\n</tbody>\n</table>\n</div><ul>\n<li>The <code>Encryption IV</code> and the <code>Encryption Key</code> are used to decrypt <code>Data</code>, not <code>Command</code>.</li>\n<li>The <code>Margin P</code> and <code>Random Value</code> are used as a padding scheme. Specifically, the 4-bit <code>Margin P</code> specifies the length of the <code>Random Value</code> to be between 0 and 15 bytes.</li>\n<li>The <code>Checksum F</code>, serving as a MAC, should be the FNV1a hash of all plaintext in <code>Command</code>, excluding itself.</li>\n</ul>\n<h3>Inappropriate authentication</h3>\n<p>On May 31, 2020, <a href=\"https://github.com/p4gefau1t\" rel=\"nofollow noopener\">@p4gefau1t</a> <a href=\"https://github.com/v2ray/v2ray-core/issues/2523\" rel=\"nofollow noopener\">reported</a> that VMess servers could be identified by replay-based active probing, due to the inappropriate authentications.</p>\n<p>VMess authenticates each request in two steps, using <code>Authentication Credential</code> and <code>checksum</code>. Unfortunately both of them can be circumvented.</p>\n<p>First, the VMess server validates whether the timestamp in <code>Authentication Credential</code> is expired. The expiration time is <a href=\"https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/validator.go#L18\" rel=\"nofollow noopener\">120 seconds</a> at maximum and 60 seconds on average (see <a href=\"https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L132\" rel=\"nofollow noopener\">here</a> and <a href=\"https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/validator.go#L130\" rel=\"nofollow noopener\">here</a> for implementation details). That is to say, an attacker can record and replay a legitimate <code>Authentication Credential</code> within around 60 seconds to bypass this authentication.</p>\n<p>Second, since the <code>aes-cfb</code> used to encrypt the <code>Command</code> does not provide any authentication, a <a href=\"https://en.wikipedia.org/wiki/Authenticated_encryption#MAC-then-Encrypt_(MtE)\" rel=\"nofollow noopener\">MAC-then-Encrypt</a> mechanism is used. As <a href=\"https://github.com/v2ray/v2ray-core/issues/2523#issuecomment-636528060\" rel=\"nofollow noopener\">pointed out</a> by <span class=\"mention\">@p4gefau1t</span>, VMess fell into the same pitfall as <a href=\"https://printempw.github.io/why-do-shadowsocks-deprecate-ota/\" rel=\"nofollow noopener\">Shadowsocks OTA mode did</a> (See the English summary on the weakness of Shadowsocks OTA mode <a href=\"https://groups.google.com/forum/#!msg/traffic-obf/CWO0peBJLGc/Py-clLSTBwAJ\" rel=\"nofollow noopener\">here</a>). Specifically, since the length of the <code>Random Value</code> varies, the server will not be able to know where the <code>Checksum F</code> (MAC) is located, unless it blindly trusts the value in <code>Margin P</code> without any authentication (see <a href=\"https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L163-L198\" rel=\"nofollow noopener\">here</a> for implementation details). In other words, only after reading P+4 bytes, V2Ray will be able to validate whether the decrypted content is legal. If not legal, the V2Ray server will close the connection.</p>\n<p>VMess server indeed has <a href=\"https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L159\" rel=\"nofollow noopener\">a replay defense mechanism</a>. In particular, the server records the (<code>Encryption IV</code>, <code>Encryption Key</code>) of each request, <strong>regardless of the validity of the requests</strong>; and close the connection immediately when the (<code>Encryption IV</code>, <code>Encryption Key</code>) is seen before. Depending on her needs, an attacker can:</p>\n<ol>\n<li>bypass this replay defense by alternating the (ciphertext of) <code>Encryption IV</code> or <code>Encryption Key</code>.</li>\n<li>or intentionally trigger the replay defense to expect the inconsistency behaviors of the servers when seeing the same (<code>Encryption IV</code>, <code>Encryption Key</code>) first time and more times.</li>\n</ol>\n<p>Exploiting these weaknesses, many replay-based probes are creatively crafted to identify the VMess server. We introduce them below in separate sections.</p>\n<h3>Replays with padding length field changed</h3>\n<p>Based on <a href=\"https://github.com/p4gefau1t\" rel=\"nofollow noopener\">@p4gefau1t</a>’s <a href=\"https://github.com/v2ray/v2ray-core/issues/2523\" rel=\"nofollow noopener\">findings</a>, <a href=\"https://github.com/studentmain\" rel=\"nofollow noopener\">@studentmain</a> proposed and <a href=\"https://github.com/p4gefau1t\" rel=\"nofollow noopener\">@p4gefau1t</a> improved an attack to identify the VMess servers. For simplicity, below we present this attack in a slightly different way.</p>\n<p>The malicious probe is a replay of the legitimate request, with many bytes changed as follows:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>16 bytes</th>\n<th>41 bytes</th>\n<th>\n<em>M</em> bytes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Auth Info</td>\n<td>Malicious Incomplete Command</td>\n<td>Zeros</td>\n</tr>\n</tbody>\n</table>\n</div><br>\n<p>The <code>Malicious Incomplete Command</code> includes:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>1 byte</th>\n<th>16 bytes</th>\n<th>16 bytes</th>\n<th>1 byte</th>\n<th>1 byte</th>\n<th>4 bits</th>\n<th>4 bits</th>\n<th>1 byte</th>\n<th>1 byte</th>\n<th>2 byte</th>\n<th>1 bytes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Version</td>\n<td>Encryption IV</td>\n<td>Encryption Key</td>\n<td>Response Auth V</td>\n<td>Options</td>\n<td>Margin P</td>\n<td>Encrypt Method</td>\n<td>Reserved</td>\n<td>CMD</td>\n<td>Port</td>\n<td>Address Type</td>\n</tr>\n</tbody>\n</table>\n</div><p>In total, the attacker makes 16 connections to the server. In each connection, the attacker:</p>\n<ol>\n<li>first sends a replay of the first 16 + 41 bytes of the legitimate connection, with both the last byte of the <code>Encryption Key</code> and the 4-bit <code>Margin P</code> changed to a value different from the ones in other connections;</li>\n<li>then sends <em>M</em> bytes of zero (or random) data one byte per second, until the server closes the connection.</li>\n</ol>\n<p>If the <em>M</em>s recorded among 16 connections happen to be a list of non-repeated integers with the delta of max and min is 15, then it is very likely that the server runs VMess protocol.</p>\n<p>The explanations of the attack are as follows:</p>\n<ul>\n<li>To circumvent the authentication based on <code>Auth Info</code>, the attacker replays an <code>Auth Info</code> sent by the legitimate client in around 60 seconds.</li>\n<li>To circumvent the replay defense based on (<code>Encryption IV</code>, <code>Encryption Key</code>), the attacker uses a different value of the <code>Encryption Key</code> in each connection.</li>\n<li>To avoid the <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Error_propagation\" rel=\"nofollow noopener\">bit errors propagating</a> to the <code>Margin P</code>, the attacker carefully chooses the last byte of the <code>Encryption Key</code> to alter. This is because this byte happens to be within the same 16-byte cipher block as the <code>Margin P</code>. (Note that, the <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Error_propagation\" rel=\"nofollow noopener\">bit error propagation</a> of <code>AES-128-CFB</code> works as follows: changing a bit in cipher block <em>Ci</em>, will change 1) the specific corresponding bit in plaintext block <em>Pi</em>; 2) as well as the Random bit errors in all subsequent blocks.)</li>\n<li>The attacker then exploits the <a href=\"https://en.wikipedia.org/wiki/Malleability_(cryptography)\" rel=\"nofollow noopener\">malleability</a> of the stream cipher to enumerate all possible values of the 4-bit <code>Margin P</code> in 16 connections.</li>\n<li>After reading the 16+41 bytes, the server waits for the <code>Address</code>, <code>Paddings</code> and <code>Checksum</code> before closing the connection due to checksum error. Thus, the <em>M</em> measured here is actually <code>N-byte address + P-byte padding + 4-byte checksum</code>.</li>\n<li>The attacker can thus infer the value of <code>Margin P</code> from <em>M</em> because the <code>Paddings</code> is the only field with varied length. (The length of the <code>Address</code> is a fixed value, because the address type is not changed.)</li>\n</ul>\n<h3>Relays that trigger inconsistent draining behaviors</h3>\n<p>After the patches to defeat the probes above, <a href=\"https://github.com/nametoolong\" rel=\"nofollow noopener\">@nametoolong</a> <a href=\"https://github.com/v2ray/v2ray-core/issues/2539#issuecomment-638533283\" rel=\"nofollow noopener\">found two more types of replay-based probes</a> that can still the detect VMess servers. Both of them are related to how the server closes the connection. Below, we introduce the first of them, and we leave the explanations of the second attack as an exercise to reader.</p>\n<p><a href=\"https://github.com/nametoolong\" rel=\"nofollow noopener\">@nametoolong</a> described the probes and the behaviors of the server as follows:</p>\n<pre><code>    Vector 1:\n    Let M1 be the first 54 bytes of a valid session.\n    Let M2=M1. Tamper with M2[48] (i.e. alter the 49th byte of M2).\n    Replay M1. Connection is closed immediately.\n    Replay M2. Connection is not closed.\n    Replay M2 again. Connection is closed immediately.\n</code></pre>\n<p>The <em>byte 48</em> (counting from 0) that got changed is the last byte of the <code>Encryption Key</code>.</p>\n<p>In this attack, the attacker intentionally triggers the replay defense, and expects the inconsistent behaviors of the servers when seeing the same (<code>Encryption IV</code>, <code>Encryption Key</code>) for the first time and for more times. The detailed explanations are as follows:</p>\n<ol>\n<li>Since the (<code>Encryption IV</code>, <code>Encryption Key</code>) in M1 is the same as the one in the legitimate connection, the server will detect this replay attack and thus close the connection immediately.</li>\n<li>When it is the first time to send M2, since the server has never seen the altered (<code>Encryption IV</code>, <code>Encryption Key</code>), it will bypass the replay defense. The server thus waits for more bytes to come,<br>\nrather than close the connection.</li>\n<li>When it is the second time to send M2, since the server has seen the same (<code>Encryption IV</code>, <code>Encryption Key</code>) before, the server will close the connection immediately.</li>\n</ol>\n<p>The V2Ray has actually been patched so that it will close the connections after reading a random number of bytes within a certain range, or after waiting for a random amount of time within a certain range. However, this attack is possible because of the inconsistent usage of the draining methods when different types of errors happen.</p>\n<p><a href=\"https://github.com/nametoolong\" rel=\"nofollow noopener\">@nametoolong</a> thus suggested:</p>\n<pre><code>    Drain the connection on all types of errors.\n    It still needs to be considered whether draining the connection itself is a attack vector.\n</code></pre>\n<h3>Our comments</h3>\n<p>Although we do not know whether the GFW uses active probing against VMess protocol, the attacks proposed above are feasible to the GFW. For example, it is <a href=\"https://gfw.report/blog/gfw_shadowsocks/#delay-of-replay-attacks\" rel=\"nofollow noopener\">observed</a> that the GFW is capable of sending replay-based probes with no delay or arbitrarily long delay. We will investigate whether the GFW uses active probing against VMess protocol in the following work. At the same time, it will save us a lot of time if users can report which V2Ray servers were blocked when using what settings.</p>\n<p>It may be a good idea to use a replay defense mechanism for the <code>auth info</code> that is based on both <code>expiration time</code> and <code>nonce</code>. On one hand, V2Ray uses a replay defense mechanism based on expiration time. It will thus consider a replay sent within the expiration time as valid. On the other hand, Shadowsocks-libev uses a <a href=\"https://github.com/shadowsocks/shadowsocks-org/issues/44\" rel=\"nofollow noopener\">replay defense mechanism based on nonce</a>. But it requires the servers to remember these nonces forever until the key is changed. This seems to be complicated to implement as it should even still remember the nonce after a reboot of the software. Therefore, a replay defense mechanism based on both <code>expiration time</code> and <code>nonce</code> may be a good choice.</p>\n<p><a href=\"https://censorbib.nymity.ch/pdf/Frolov2020a.pdf\" rel=\"nofollow noopener\">Frolov et al.</a> found that various popular circumvention tools, including obfs4, Shadowsocks Outline, Psiphon’s OSSH and Lantern’s Lampshade, can be identified using the TCP flags and timing information when the servers close the connections. Frolov et al. thus suggested that <a href=\"https://censorbib.nymity.ch/pdf/Frolov2020a.pdf#page=13\" rel=\"nofollow noopener\">servers should “forever read” on errors</a>, so that the probers will be the first to close the connection. This way, it not only reduces the information leaked by server’s timeout value, but also let server to close the connection with FIN/ACK consistently (see <a href=\"https://censorbib.nymity.ch/pdf/Frolov2020a.pdf#page=5\" rel=\"nofollow noopener\">Fig. 1 here</a> for more details).</p>\n<h2>Unique TLS ClientHello Fingerprints</h2>\n<p>On May 30, 2020, <a href=\"https://github.com/p4gefau1t\" rel=\"nofollow noopener\">@p4gefau1t</a> <a href=\"https://github.com/v2ray/discussion/issues/704\" rel=\"nofollow noopener\">reported</a> V2Ray clients would send TLS ClientHello messages with <a href=\"https://tlsfingerprint.io/id/8c48b95f67260663\" rel=\"nofollow noopener\">very unique fingerprints</a>. Such unique fingerprints not only gave a censor the opportunity to identify the V2Ray clients and servers, but also allowed a censor to <a href=\"https://github.com/v2ray/discussion/issues/704#issuecomment-636351112\" rel=\"nofollow noopener\">accurately</a> block the TLS traffic by V2Ray without much collateral damage.</p>\n<p><a href=\"https://github.com/p4gefau1t\" rel=\"nofollow noopener\">@p4gefau1t</a> further identified that these unique fingerprints were partially caused by the use of <a href=\"https://github.com/v2ray/v2ray-core/blob/edb4fed387d27890902e7ee97aae0d97292f912b/transport/internet/tls/config.go#L176-L230\" rel=\"nofollow noopener\">a hardcoded ciphersuite</a>. Specifically, this rarely seen ciphersuite would be used,<br>\nwhen the <code>AllowInsecureCiphers</code> flag was its default value <code>false</code>.</p>\n<p>V2Ray developer <a href=\"https://github.com/xiaokangwang\" rel=\"nofollow noopener\">@xiaokangwang</a> <a href=\"https://github.com/v2ray/v2ray-core/issues/2542\" rel=\"nofollow noopener\">mitigated</a> this weakness by using the default settings of go-tls library since <code>v4.23.4</code> (see patches <a href=\"https://github.com/v2ray/v2ray-core/pull/2510\" rel=\"nofollow noopener\">#2510</a>, <a href=\"https://github.com/v2ray/v2ray-core/pull/2512\" rel=\"nofollow noopener\">#2512</a>, <a href=\"https://github.com/v2ray/v2ray-core/issues/2518\" rel=\"nofollow noopener\">#2518</a>). <a href=\"https://github.com/tomac4t\" rel=\"nofollow noopener\">@tomac4t</a> summarized a form, comparing the <a href=\"https://gist.github.com/tomac4t/efd739d197f9f864a10f39c01d5c893f\" rel=\"nofollow noopener\">ClientHello fingerprints</a> before and after the patches using <a>tlsfingerprint.io</a>. However, the fingerprints seem to be still quite unique.</p>\n<p>To our best knowledge, as early as November, 2019, <a href=\"https://github.com/klzgrad/\" rel=\"nofollow noopener\">@klzgrad</a> <a href=\"https://gist.github.com/klzgrad/25b2612d266a450abca6129a7ca595a4#v2ray-v4213\" rel=\"nofollow noopener\">had already investigated the fingerprints of V2Ray v4.21.3</a> as well as many other TLS-based circumvention tools. The <a href=\"https://gist.github.com/klzgrad/25b2612d266a450abca6129a7ca595a4\" rel=\"nofollow noopener\">result</a> shows most of them have rarely seen TLS ClientHello fingerprints.</p>\n<p>Side notes:</p>\n<ul>\n<li>As summarized in the <a href=\"https://tlsfingerprint.io/static/frolov2019.pdf#page=13\" rel=\"nofollow noopener\">Client Hello Fingerprinting section</a>, many works have used ClientHello messages to fingerprint different TLS implementations. Frolov et al. <a href=\"https://tlsfingerprint.io/static/frolov2019.pdf\" rel=\"nofollow noopener\">discovered</a> that the TLS ClientHello fingerprints of many popular circumvention tools were very unique (see <a href=\"https://tlsfingerprint.io/static/frolov2019.pdf#page=9\" rel=\"nofollow noopener\">Table 2</a> for more details). Frolov et al. thus developed <a href=\"https://github.com/refraction-networking/utls\" rel=\"nofollow noopener\">utls</a> and created <a>tlsfingerprint.io</a>.</li>\n<li>\n<a href=\"https://github.com/p4gefau1t\" rel=\"nofollow noopener\">@p4gefau1t</a> investigated this issue because <a href=\"https://github.com/rickyzhang82\" rel=\"nofollow noopener\">@rickyzhang82</a> demonstrated a <a href=\"https://fr33land.net/2020/03/12/can-enable-tls-in-v2ray-help/\" rel=\"nofollow noopener\">machine learning model</a> that can identify the TLS traffic by V2Ray with <a href=\"https://github.com/rickyzhang82/V2Ray-Deep-Packet-Inspection\" rel=\"nofollow noopener\">0.9999 accuracy</a>. The same model, without additional training, could not accurately identify the new TLS traffic of V2Ray after the developers made changes to the fingerprint.</li>\n<li>\n<a href=\"https://github.com/DuckSoft\" rel=\"nofollow noopener\">@DuckSoft</a> demonstrated that the blocking based on TLS ciphersuites can be written in <a href=\"https://github.com/v2ray/discussion/issues/704#issuecomment-636351112\" rel=\"nofollow noopener\">one line of iptables rules</a>.</li>\n</ul>\n<h2>Failed to Mimic the HTTP Server</h2>\n<p>On June 2, 2020, <a href=\"https://github.com/p4gefau1t\" rel=\"nofollow noopener\">@p4gefau1t</a> <a href=\"https://github.com/v2ray/v2ray-core/issues/2537\" rel=\"nofollow noopener\">reported</a> the V2Ray failed to mimic real HTTP communications. In particular, the two reported issues are:</p>\n<ol>\n<li>Both V2Ray clients and servers will prepend a HTTP header only to the first TCP payload they send in each connection, making the mimicking traffic easy to be detected.</li>\n<li>V2Ray servers use <a href=\"https://github.com/v2ray/v2ray-core/blob/85633ec25ea06aff31fb1754992ebf86a3a737bd/transport/internet/headers/http/http.go#L236-L263\" rel=\"nofollow noopener\">a hardcoded 500 response for various types of failures</a>, making the mimicking server easy to be distinguished by active probes.</li>\n</ol>\n<p>Since <a href=\"https://people.cs.umass.edu/~amir/papers/parrot.pdf\" rel=\"nofollow noopener\">the parrot is dead</a> since 2013, instead of reviving the parrot, using a real HTTP engine may be a more promising solution here. Many circumvention tools have been using the idea of <code>application fronting</code>, which include <a href=\"https://github.com/caddyserver/forwardproxy\" rel=\"nofollow noopener\">forwardproxy</a>, <a href=\"https://github.com/klzgrad/naiveproxy\" rel=\"nofollow noopener\">naiveproxy</a> and <a href=\"https://github.com/trojan-gfw/trojan\" rel=\"nofollow noopener\">trojan</a>.</p>\n<h2>Credits</h2>\n<p>All credit goes to the authors of the corresponding works.</p>\n<h2>Thanks</h2>\n<p>We want to thank <a href=\"https://github.com/studentmain\" rel=\"nofollow noopener\">@studentmain</a> and <a href=\"https://github.com/p4gefau1t\" rel=\"nofollow noopener\">@p4gefau1t</a> for helping us understand their proposed replay attacks, and for sharing their inspiring thoughts on the future works. We are also grateful to David Fifield and <span class=\"mention\">@studentmain</span> for offering detailed feedback on a draft of this summary.</p>\n<h2>Contacts</h2>\n<p>We will investigate whether the GFW uses active probing against VMess protocol in the following work. At the same time, it will save us a lot of time if you, as a user, can report which circumvention services were blocked when using what settings. We encourage you to share your comments publicly or privately. Our private contact information can be found at the footer of <a href=\"https://gfw.report/\" rel=\"nofollow noopener\">GFW Report</a>.</p>",
        "post_number": 1,
        "post_type": 1,
        "posts_count": 1,
        "updated_at": "2020-06-16T18:25:03.627Z",
        "reply_count": 0,
        "reply_to_post_number": null,
        "quote_count": 0,
        "incoming_link_count": 648,
        "reads": 15,
        "readers_count": 14,
        "score": 3243.0,
        "yours": false,
        "topic_id": 556,
        "topic_slug": "summary-on-recently-discovered-v2ray-weaknesses",
        "display_username": "gfw.report",
        "primary_group_name": null,
        "flair_name": null,
        "flair_url": null,
        "flair_bg_color": null,
        "flair_color": null,
        "flair_group_id": null,
        "badges_granted": [],
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_see_hidden_post": false,
        "can_wiki": false,
        "link_counts": [
            {
                "url": "https://gfw.report/blog/v2ray_weaknesses/zh/",
                "internal": false,
                "reflection": false,
                "clicks": 21
            },
            {
                "url": "https://github.com/v2ray/manual/blob/master/eng_en/protocols/vmess.md",
                "internal": false,
                "reflection": false,
                "title": "manual/vmess.md at master · v2ray/manual · GitHub",
                "clicks": 4
            },
            {
                "url": "https://gfw.report/blog/v2ray_weaknesses/en/",
                "internal": false,
                "reflection": false,
                "clicks": 3
            },
            {
                "url": "https://github.com/nametoolong",
                "internal": false,
                "reflection": false,
                "title": "nametoolong · GitHub",
                "clicks": 2
            },
            {
                "url": "https://people.cs.umass.edu/~amir/papers/parrot.pdf",
                "internal": false,
                "reflection": false,
                "clicks": 2
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/validator.go#L18",
                "internal": false,
                "reflection": false,
                "title": "v2ray-core/validator.go at 4b81ba947f89218ea7c99362b43beeeb5c3cf37b · v2ray/v2ray-core · GitHub",
                "clicks": 2
            },
            {
                "url": "https://gfw.report/",
                "internal": false,
                "reflection": false,
                "title": "Welcome to GFW.Report",
                "clicks": 2
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L132",
                "internal": false,
                "reflection": false,
                "title": "v2ray-core/server.go at 4b81ba947f89218ea7c99362b43beeeb5c3cf37b · v2ray/v2ray-core · GitHub",
                "clicks": 2
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/validator.go#L130",
                "internal": false,
                "reflection": false,
                "title": "v2ray-core/validator.go at 4b81ba947f89218ea7c99362b43beeeb5c3cf37b · v2ray/v2ray-core · GitHub",
                "clicks": 2
            },
            {
                "url": "https://github.com/trojan-gfw/trojan",
                "internal": false,
                "reflection": false,
                "clicks": 2
            },
            {
                "url": "https://github.com/studentmain",
                "internal": false,
                "reflection": false,
                "title": "studentmain (Student Main) · GitHub",
                "clicks": 1
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/issues/2523",
                "internal": false,
                "reflection": false,
                "title": "vmess协议设计和实现缺陷可导致服务器遭到主动探测特征识别(附PoC) · Issue #2523 · v2ray/v2ray-core · GitHub",
                "clicks": 1
            },
            {
                "url": "https://github.com/rickyzhang82/V2Ray-Deep-Packet-Inspection",
                "internal": false,
                "reflection": false,
                "clicks": 1
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/issues/2518",
                "internal": false,
                "reflection": false,
                "title": "关于 v4.23.2 前固定 TLS 密码套件潜在的特征识别风险 · Issue #2518 · v2ray/v2ray-core · GitHub",
                "clicks": 1
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L137",
                "internal": false,
                "reflection": false,
                "title": "v2ray-core/server.go at 4b81ba947f89218ea7c99362b43beeeb5c3cf37b · v2ray/v2ray-core · GitHub",
                "clicks": 1
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/blob/85633ec25ea06aff31fb1754992ebf86a3a737bd/transport/internet/headers/http/http.go#L236-L263",
                "internal": false,
                "reflection": false,
                "clicks": 1
            },
            {
                "url": "https://tlsfingerprint.io/static/frolov2019.pdf#page=9",
                "internal": false,
                "reflection": false,
                "clicks": 1
            },
            {
                "url": "https://tlsfingerprint.io/id/8c48b95f67260663",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/pull/2510",
                "internal": false,
                "reflection": false,
                "title": "tls use crypto std cipher suites by vcptr · Pull Request #2510 · v2ray/v2ray-core · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/klzgrad/",
                "internal": false,
                "reflection": false,
                "title": "klzgrad · GitHub",
                "clicks": 0
            },
            {
                "url": "https://gist.github.com/klzgrad/25b2612d266a450abca6129a7ca595a4#v2ray-v4213",
                "internal": false,
                "reflection": false,
                "title": "TLS指纹调查.md · GitHub",
                "clicks": 0
            },
            {
                "url": "https://tlsfingerprint.io/static/frolov2019.pdf#page=13",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/rickyzhang82",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/tomac4t",
                "internal": false,
                "reflection": false,
                "title": "tomac4t · GitHub",
                "clicks": 0
            },
            {
                "url": "https://tlsfingerprint.io/static/frolov2019.pdf",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/DuckSoft",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/issues/2537",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/caddyserver/forwardproxy",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/klzgrad/naiveproxy",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://fr33land.net/2020/03/12/can-enable-tls-in-v2ray-help/",
                "internal": false,
                "reflection": false,
                "title": "Can Enable TLS in V2Ray Help | Land of the Free",
                "clicks": 0
            },
            {
                "url": "https://www.v2ray.com/developer/protocols/vmess.html",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/issues/2523#issuecomment-636528060",
                "internal": false,
                "reflection": false,
                "title": "vmess协议设计和实现缺陷可导致服务器遭到主动探测特征识别(附PoC) · Issue #2523 · v2ray/v2ray-core · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/issues/2542",
                "internal": false,
                "reflection": false,
                "title": "关于在近期收到的数个漏洞的项目组公告 · Issue #2542 · v2ray/v2ray-core · GitHub",
                "clicks": 0
            },
            {
                "url": "https://gist.github.com/tomac4t/efd739d197f9f864a10f39c01d5c893f",
                "internal": false,
                "reflection": false,
                "title": "Circumvention-Protocol-TLS-ClientHello.md · GitHub",
                "clicks": 0
            },
            {
                "url": "https://gist.github.com/klzgrad/25b2612d266a450abca6129a7ca595a4",
                "internal": false,
                "reflection": false,
                "title": "TLS指纹调查.md · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/refraction-networking/utls",
                "internal": false,
                "reflection": false,
                "title": "GitHub - refraction-networking/utls: Fork of the Go standard TLS library, providing low-level access to the ClientHello for mimicry purposes.",
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/blob/edb4fed387d27890902e7ee97aae0d97292f912b/transport/internet/tls/config.go#L176-L230",
                "internal": false,
                "reflection": false,
                "title": "v2ray-core/config.go at edb4fed387d27890902e7ee97aae0d97292f912b · v2ray/v2ray-core · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/discussion/issues/704",
                "internal": false,
                "reflection": false,
                "title": "v2ray的TLS流量可被简单特征码匹配精准识别（附PoC) · Issue #704 · v2ray/discussion · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L159",
                "internal": false,
                "reflection": false,
                "title": "v2ray-core/server.go at 4b81ba947f89218ea7c99362b43beeeb5c3cf37b · v2ray/v2ray-core · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/p4gefau1t",
                "internal": false,
                "reflection": false,
                "title": "p4gefau1t (Page Fault) · GitHub",
                "clicks": 0
            },
            {
                "url": "https://printempw.github.io/why-do-shadowsocks-deprecate-ota/",
                "internal": false,
                "reflection": false,
                "title": "为何 shadowsocks 要弃用一次性验证 (OTA) - PRIN BLOG",
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/blob/4b81ba947f89218ea7c99362b43beeeb5c3cf37b/proxy/vmess/encoding/server.go#L163-L198",
                "internal": false,
                "reflection": false,
                "title": "v2ray-core/server.go at 4b81ba947f89218ea7c99362b43beeeb5c3cf37b · v2ray/v2ray-core · GitHub",
                "clicks": 0
            },
            {
                "url": "https://en.wikipedia.org/wiki/Authenticated_encryption#MAC-then-Encrypt_(MtE)",
                "internal": false,
                "reflection": false,
                "title": "Authenticated encryption - Wikipedia",
                "clicks": 0
            },
            {
                "url": "https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Error_propagation",
                "internal": false,
                "reflection": false,
                "title": "Block cipher mode of operation - Wikipedia",
                "clicks": 0
            },
            {
                "url": "https://groups.google.com/forum/#!msg/traffic-obf/CWO0peBJLGc/Py-clLSTBwAJ",
                "internal": false,
                "reflection": false,
                "title": "Google Groups",
                "clicks": 0
            },
            {
                "url": "https://en.wikipedia.org/wiki/Malleability_(cryptography)",
                "internal": false,
                "reflection": false,
                "title": "Malleability (cryptography) - Wikipedia",
                "clicks": 0
            },
            {
                "url": "https://censorbib.nymity.ch/pdf/Frolov2020a.pdf",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://censorbib.nymity.ch/pdf/Frolov2020a.pdf#page=13",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://censorbib.nymity.ch/pdf/Frolov2020a.pdf#page=5",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/issues/2539#issuecomment-638533283",
                "internal": false,
                "reflection": false,
                "title": "Some extra ways of active probing · Issue #2539 · v2ray/v2ray-core · GitHub",
                "clicks": 0
            },
            {
                "url": "https://gfw.report/blog/gfw_shadowsocks/#delay-of-replay-attacks",
                "internal": false,
                "reflection": false,
                "clicks": 0
            },
            {
                "url": "https://github.com/shadowsocks/shadowsocks-org/issues/44",
                "internal": false,
                "reflection": false,
                "title": "Defend against replay attack · Issue #44 · shadowsocks/shadowsocks-org · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/discussion/issues/704#issuecomment-636351112",
                "internal": false,
                "reflection": false,
                "title": "v2ray的TLS流量可被简单特征码匹配精准识别（附PoC) · Issue #704 · v2ray/discussion · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/xiaokangwang",
                "internal": false,
                "reflection": false,
                "title": "xiaokangwang (Xiaokang Wang) · GitHub",
                "clicks": 0
            },
            {
                "url": "https://github.com/v2ray/v2ray-core/pull/2512",
                "internal": false,
                "reflection": false,
                "title": "let crypto/tls choose the proper ciphers by vcptr · Pull Request #2512 · v2ray/v2ray-core · GitHub",
                "clicks": 0
            }
        ],
        "read": true,
        "user_title": null,
        "bookmarked": false,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 115,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": false,
        "wiki": false,
        "post_url": "/t/summary-on-recently-discovered-v2ray-weaknesses/556/1",
        "can_translate": false
    }
]